// include xfunction for updateVersion
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "io.github.lambdaprime:id.xfunction:14.0"
  }
}

plugins {
  id 'com.diffplug.spotless'
  id 'java-library'
}

apply plugin : 'eclipse'

dependencies {
  api "org.openpnp:opencv:4.6.0-0"
  api 'org.apache.commons:commons-math3:3.6.1'
  api "io.github.lambdaprime:id.xfunction:20.0"
}

jar {
  manifest { 
    attributes 'Automatic-Module-Name': 'id.matcv' 
  }
}

java {
  // disable Gradle modularity support since it is not working properly
  // for non modules like OpenPnP OpenCV and setup module path manually later:
  // https://github.com/gradle/gradle/issues/17609
  // https://github.com/gradle/gradle/issues/12630
  modularity.inferModulePath = false
}

compileJava {
  doFirst {
    options.compilerArgs = [
      '--module-path', classpath.asPath
    ]
    classpath = files()
  }
}

javadoc {
  options.modulePath = classpath.getFiles().stream()
    .collect(java.util.stream.Collectors.toList())
  options.noTimestamp = true
  options.noQualifiers = ["all"]
  options.noTree = true
  options.noIndex = true
  options.noNavBar = true
  // ignore missing @return, @param etc
  options.addBooleanOption('Xdoclint:all,-missing', true)
}

task createRelease(type: Copy) {
  def out = 'release'
  from jar.archiveFile
  into out
}

task cleanRelease(type: Delete) {
  delete "$projectDir/release/*-SNAPSHOT.jar"
}

assemble.dependsOn createRelease
clean.dependsOn cleanRelease

task copyReadme(type: Copy) {
  from("../README.md")
  into("$buildDir/resources/main")
  rename ("README.md", "README-${projectName}.md")
}

// overwrite template README which comes from resources folder
jar.dependsOn copyReadme
javadoc.dependsOn copyReadme

// run spotless and format code before the build
classes.dependsOn spotlessApply

task updateVersion() {
  // update version only when it is specified and non SNAPSHOT version is built
  // 'unspecified' is the default value for the version in Gradle if it is not set
  if (!version || version == "unspecified" || version.contains("SNAPSHOT")) return;
  println "Updating version to " + version
  new id.xfunction.text.Substitutor()
    .withRegexpSupport()
    .substitute(java.nio.file.Paths.get("${project.rootDir}/README.md"), Map.of(
      "io.github.lambdaprime:matcv:[0-9.]+", "io.github.lambdaprime:matcv:" + version
    ));
}
createRelease.dependsOn updateVersion

if (project.hasProperty('publish')) {

  // Initially it was taken from https://central.sonatype.org/publish/publish-gradle/
  // but since Gradle removed this plugin https://docs.gradle.org/7.0/userguide/upgrading_version_6.html#removal_of_the_legacy_maven_plugin
  // it was rewritten for new one

  task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from "README-javadoc.txt"
  }

  task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from "README-sources.txt"
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  apply plugin: 'maven-publish'

  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId = 'matcv'
        groupId = 'io.github.lambdaprime'
        from components.java
        pom {
          name = 'matcv'
          description = 'Java tools for Computer Vision'
          url = 'http://portal2.atwebpages.com/matcv'

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = 'lambdaprime'
              email = 'intid@protonmail.com'
            }
          }

          scm {
            url = 'https://github.com/lambdaprime/matcv'
          }
        }
      }
    }
    repositories {
      maven {
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
    }    
  }

  if (project.hasProperty('signing.secretKeyRingFile')) {
    apply plugin: 'signing'

    signing {
      sign publishing.publications.mavenJava
    }
  }
}
